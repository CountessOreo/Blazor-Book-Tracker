@using BookTracker.Models
@inject NavigationManager NavigationManager

<div class="main-content">
    <EditForm Model="@Book" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Title</label>
            <InputText class="form-control" @bind-Value="Book.Title" />
        </div>

        <div class="form-group">
            <label>Author</label>
            <InputText class="form-control" @bind-Value="Book.Author" />
        </div>

        <div class="form-group">
            <label>Description</label>
            <InputTextArea class="form-control" @bind-Value="Book.Description" />
        </div>

        <div class="form-group">
            <label>Image URL</label>
            <InputText class="form-control" @bind-Value="Book.Image" />
        </div>

        <div class="form-actions">
            <button type="submit" class="btn">Save</button>
            <button type="button" class="btn border-0" @onclick="Cancel">Cancel</button>
        </div>
    </EditForm>
</div>
@code {
    [Parameter] public Book Book { get; set; } = new();
    [Parameter] public EventCallback<Book> OnSubmit { get; set; }

    private async Task HandleValidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(Book);
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
}
