@page "/"
@inject IHttpClientFactory httpFactory
@inject NavigationManager NavigationManager
@inject StateContainer stateContainer
@inject IJSRuntime jsRuntime
@inject IBookService bookService

<main class="page-container">
    @if (isLoading)
    {
        <LoadingSpinner />
    }
    else if (hasError)
    {
        <div class="alert alert-danger">
            <strong>Oops!</strong> Failed to load books. Please try again later.
        </div>
    }
    else if (DatabaseBookList.Count > 0)
    {
        <button class="btn" @onclick="ToggleViewMode">
            Toggle View: @(IsGridView ? "Grid" : "Card")
        </button>

        @if (IsGridView)
        {
            <section class="grid-section" style=" padding: 1rem;">
                <SfGrid DataSource="@DatabaseBookList"
                        Width="100%"
                        @ref="BookDataGrid">

                    <GridColumns>
                        <GridColumn Field="@nameof(Book.Image)"
                                    TextAlign="TextAlign.Center"
                                    Width="140"
                                    AllowFiltering="false"
                                    AllowSorting="false">
                            <HeaderTemplate>
                                @* suppress header output completely *@
                                <span style="display:none;"></span>
                            </HeaderTemplate>
                            <Template>
                                @{
                                    var book = context as Book;
                                }
                                <img src="@book!.Image" alt="@book.Title" class="book-image" />
                            </Template>
                        </GridColumn>

                        <GridColumn Field="@nameof(Book.Id)" HeaderText="ID" TextAlign="TextAlign.Center" Width="120" />
                        <GridColumn Field="@nameof(Book.Title)" HeaderText="Name" TextAlign="TextAlign.Center" Width="200" />
                        <GridColumn Field="@nameof(Book.Author)" HeaderText="Author" TextAlign="TextAlign.Center" Width="200" />
                        <GridColumn Field="@nameof(Book.Description)" HeaderText="Description" TextAlign="TextAlign.Center" Width="1500" Type="ColumnType.String" />
                        <GridColumn HeaderText="Actions"
                                    TextAlign="TextAlign.Center"
                                    Width="150"
                                    AllowFiltering="false"
                                    AllowSorting="false">
                            <Template>
                                @{
                                    var book = context as Book;
                                }
                                <div class="d-flex justify-content-center">
                                    <button @onclick="() => EditBook(book)" title="Edit">✏️</button>
                                    <button @onclick="() => DeleteBook(book)" title="Delete">🗑️</button>
                                </div>
                            </Template>
                        </GridColumn>
                    </GridColumns>
                </SfGrid>
            </section>
        }
        else
        {
            <section class="book-grid">
                @foreach (var book in DatabaseBookList)
                {
                    <BookCard Book="book" OnUpdated="HandleUpdate" />
                }
            </section>
        }
    }
    else
    {
        <div class="alert alert-info mt-4">
            No books found. Use "Add Book" to get started.
        </div>
    }

    <MakeToast ToastContent="@ToastContent" Title="@Title" Display="@Display" />
</main>

@code {
    private bool VisibleProperty { get; set; } = true;
    private bool IsGridView { get; set; } = true;
    private bool isLoading { get; set; } = true;
    private bool hasError { get; set; } = false;


    SfGrid<Book> BookDataGrid = new();
    private string ToastContent = string.Empty;
    private string Title = string.Empty;
    private bool Display;

    public List<Book> DatabaseBookList { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        hasError = false;

        try
        {
            var client = httpFactory.CreateClient("LocalApi");
            var result = await client.GetAsync("api/book");

            if (!result.IsSuccessStatusCode)
            {
                var errorContent = await result.Content.ReadAsStringAsync();
                Console.WriteLine($"API ERROR: {result.StatusCode}\n{errorContent}");
                hasError = true;
                return;
            }

            var bookdata = await result.Content.ReadFromJsonAsync<List<Book>>();
            DatabaseBookList = bookdata ?? new List<Book>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}");
            hasError = true;
        }
        finally
        {
            isLoading = false;
            VisibleProperty = false;
        }
    }

    private void ToggleViewMode()
    {
        IsGridView = !IsGridView;
    }

    private async Task HandleUpdate()
    {
        await LoadData();
        await BookDataGrid.Refresh();
    }

    public async Task EditBookData(Book book)
    {
        if (book == null)
            return;

        NavigateToDetails(book);
        await LoadData();
        await BookDataGrid.Refresh();
    }

    public async Task DeleteBookData(Book book)
    {
        if (book == null)
            return;

        bool confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this book?");
        if (!confirm)
            return;

        var result = await bookService.DeleteBookAsync(book.Id);
        Display = true;
        CreateToast(result.Success, result.Message);
        await LoadData();
        await BookDataGrid.Refresh();
    }

    private void NavigateToDetails(Book bookObject)
    {
        stateContainer.ObjectTunnel.Add(bookObject.GetHashCode(), bookObject);
        NavigationManager.NavigateTo($"addbook/{bookObject.GetHashCode()}");
    }

    private void CreateToast(bool status, string message)
    {
        ToastContent = message;
        Title = status ? "Success" : "Alert";
    }

    public async Task EditBook(Book book)
    {
        if (book == null)
            return;

        stateContainer.ObjectTunnel.Add(book.GetHashCode(), book);
        NavigationManager.NavigateTo($"addbook/{book.GetHashCode()}");
        await LoadData();
        await BookDataGrid.Refresh();
    }

    public async Task DeleteBook(Book book)
    {
        if (book == null)
            return;

        bool confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this book?");
        if (!confirm)
            return;

        var result = await bookService.DeleteBookAsync(book.Id);
        Display = true;
        CreateToast(result.Success, result.Message);
        await LoadData();
        await BookDataGrid.Refresh();
    }

}
