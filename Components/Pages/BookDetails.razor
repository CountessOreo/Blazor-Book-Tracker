@page "/bookdetails/{Id:int}"
@inject IBookService bookService
@inject NavigationManager NavigationManager
@inject StateContainer stateContainer

<main class="book-details-wrapper">
    @if (isLoading)
    {
        <div class="spinner-wrapper">
            <LoadingSpinner />
        </div>
    }
    else if (book == null)
    {
        <div class="alert alert-danger modern-alert">
            <strong>Oops!</strong> Book not found.
        </div>
    }
    else
    {
        <div class="book-details-flex">
            <div class="book-left">
                <img src="@book.Image" alt="@book.Title" class="book-cover" />
            </div>

            <div class="book-right">
                <h1 class="book-title">@book.Title</h1>
                <p class="book-author">by <strong>@book.Author</strong></p>

                <div class="description-box">
                    <h4>Description</h4>
                    <p>@book.Description</p>
                </div>

                <div class="book-actions-section">
                    <BookActions Book="book" OnUpdated="LoadBook" />
                </div>

                <a class="btn back-button" @onclick="@(() => NavigationManager.NavigateTo("/"))">
                    ← Back to List
                </a>
            </div>
        </div>
    }
</main>

@code {
    [Parameter] public int Id { get; set; }
    private Book? book;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadBook();
    }

    private async Task LoadBook()
    {
        isLoading = true;
        book = await bookService.GetBookByIdAsync(Id);
        isLoading = false;
    }
}
